## Autogenerated by Scribe. DO NOT MODIFY.

name: Listen
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/listen
    metadata:
      groupName: Listen
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: index
      description: 'Get all listen for the user'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '56'
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields:
      listen:
        name: listen
        description: Liste
        required: false
        example: null
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        custom: []
    auth:
      - headers
      - Authorization
      - 'Bearer kva63ha48Ece1D5VfPbgZd6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/liste/{liste}'
    metadata:
      groupName: Listen
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Termine oder Eintragungen einer Liste anzeigen'
      description: |-
        Liefert die Termine oder Eintragungen einer Liste.
        Wenn der User die Berechtigung hat, die Liste zu bearbeiten, werden die Namen der User angezeigt die die Eintragungen gemacht oder reserviert haben.
        Ansonsten wird nur angezeigt, ob die Eintragung vergeben ist oder nicht.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      liste:
        name: liste
        description: 'The liste.'
        required: true
        example: perferendis
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      id:
        name: id
        description: 'ID der Liste'
        required: true
        example: ut
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      liste: perferendis
      id: ut
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '55'
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields:
      termine:
        name: termine
        description: Termine
        required: false
        example: null
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        custom: []
      eintragungen:
        name: eintragungen
        description: Eintragungen
        required: false
        example: null
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        custom: []
    auth:
      - headers
      - Authorization
      - 'Bearer Eca541Zfvd3D6h6gbakeV8P'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/listen/{liste}/eintrag/add'
    metadata:
      groupName: Listen
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Listeneintrag hinzufügen'
      description: |-
        Fügt einen Eintrag zu einer Liste hinzu.
        Es wird geprüft, ob der User bereits einen Eintrag in der Liste hat.
        Wenn die Liste nur einen Eintrag pro User zulässt, wird geprüft, ob der User bereits einen Eintrag hat.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      liste:
        name: liste
        description: ''
        required: true
        example: dolorem
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      liste: dolorem
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      eintragung:
        name: eintragung
        description: ''
        required: true
        example: autem
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      eintragung: autem
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer bZvd68g3P1aD4eaEkf5c6Vh'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/listen/eintrag/{eintrag_id}/stornieren'
    metadata:
      groupName: Listen
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Eintrag entfernen'
      description: |-
        Entfernt einen Eintrag aus einer Liste.
         * Wenn der Eintrag von dem User erstellt wurde, wird der Eintrag gelöscht.
         * Wenn der Eintrag von einem anderen User erstellt wurde, wird der Eintrag freigegeben.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      eintrag_id:
        name: eintrag_id
        description: 'The ID of the eintrag.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      eintrag:
        name: eintrag
        description: 'ID des Eintrags'
        required: true
        example: non
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      eintrag_id: 1
      eintrag: non
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer f6vaDePV5g4dab1Ehc386Zk'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/listen/eintrag/{eintrag_id}/reservieren'
    metadata:
      groupName: Listen
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'bestehende Eintragung reservieren'
      description: 'Reserviert eine bestehende Eintragung in einer Liste für den User.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      eintrag_id:
        name: eintrag_id
        description: 'The ID of the eintrag.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      eintrag:
        name: eintrag
        description: 'ID des Eintrags'
        required: true
        example: libero
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      eintrag_id: 1
      eintrag: libero
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer VkDdgh6e154fvP8acE6ab3Z'
    controller: null
    method: null
    route: null
    custom: []
